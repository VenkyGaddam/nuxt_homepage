name: Build and Push Multi-Arch Docker Image

on:
  push:
    branches:
      - main # Adjust this to the branch you want to trigger the build

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU (for multi-arch emulation)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx (for cross-platform builds)
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Store this in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Store this in GitHub Secrets

      - name: Build and Push Multi-Arch Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ndrdmarshmallow/homepage:latest, ndrdmarshmallow/homepage:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: SSH into remote server and deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }} # Server host (IP or domain) stored in GitHub Secrets
          username: ${{ secrets.SSH_USER }} # Username to log into the server (also from Secrets)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # The private key stored in Secrets (e.g., ~/.ssh/id_rsa)
          port: 22
          script: |
            echo "ðŸ”„ Navigating to Docker Compose directory"
            cd /var/apps/homepage

            echo "ðŸ’¥ Stopping and removing old containers"
            docker compose down || echo "No containers to stop"

            echo "ðŸ“¦ Pulling the latest Docker image"
            docker compose pull

            echo "ðŸš€ Spinning up new containers"
            docker compose up -d

            echo "ðŸ§¹ Cleaning up unused Docker resources"
            docker system prune -f

            echo "âœ… Deployment complete"
